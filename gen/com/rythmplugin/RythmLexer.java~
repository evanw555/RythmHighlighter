/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.rythmplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.rythmplugin.psi.RythmTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Rythm.flex</tt>
 */
class RythmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int IMPORT = 4;
  public static final int ARGS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14656 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\12\1\34\1\35\2\12\1\15\1\36\3\12\1\37\10\12\1\40\1\41\20\12\1\42"+
    "\2\12\1\43\4\12\1\44\1\45\1\46\3\12\1\47\1\50\1\51\3\12\51\15\1\52\3\15\1"+
    "\53\1\54\4\15\1\55\12\12\1\56\u02c1\12\1\57\277\12");

  /* The ZZ_CMAP_Y table has 3072 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\2\1\1\44\7\13\1\45\1\24\1\34\1\46\1\35\1\47\1"+
    "\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22\1\35"+
    "\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71\1\72"+
    "\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1\1\1"+
    "\103\1\77\1\35\1\104\1\101\1\105\1\45\1\106\1\103\1\77\1\13\1\37\1\107\1\110"+
    "\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13\1\31\1"+
    "\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1\121\1"+
    "\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121\4\13"+
    "\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1\143"+
    "\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13\1"+
    "\24\1\31\4\13\1\145\1\146\1\147\1\43\1\13\1\43\1\13\1\150\1\147\1\151\5\13"+
    "\1\152\1\121\1\1\1\153\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120\2\42"+
    "\1\56\1\13\1\41\1\43\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1\13\1"+
    "\36\2\121\1\154\1\120\4\1\4\13\1\42\1\121\1\155\1\150\7\13\1\150\3\13\1\26"+
    "\1\100\2\13\1\41\5\1\1\156\1\13\1\157\17\13\1\160\21\13\1\144\2\13\1\144\1"+
    "\161\1\13\1\41\3\13\1\162\1\163\1\164\1\133\1\163\2\1\1\165\1\166\1\63\1\167"+
    "\1\1\1\170\1\1\1\133\3\1\2\13\1\63\1\171\1\172\1\173\1\127\1\174\1\1\2\13"+
    "\1\146\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10\13\1\175\1\150"+
    "\2\13\1\136\3\13\1\176\1\166\1\13\1\177\4\200\2\13\2\1\1\166\35\1\1\201\1"+
    "\1\1\24\1\202\1\24\4\13\1\203\1\24\4\13\1\137\1\204\1\13\1\41\1\24\4\13\1"+
    "\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2\1\10\13\1\133"+
    "\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\205\7\13\1\16\1\1\1\206\1"+
    "\207\5\13\1\210\1\13\1\41\1\26\3\1\1\206\2\13\1\26\1\1\3\13\1\150\4\13\1\43"+
    "\1\121\1\13\1\211\2\13\1\41\2\13\1\150\1\13\1\133\4\13\1\212\1\121\1\13\1"+
    "\120\3\13\1\177\1\41\1\121\1\13\1\113\4\13\1\32\1\153\1\13\1\213\1\214\1\215"+
    "\1\200\2\13\1\137\1\57\7\13\1\216\1\121\72\13\1\150\1\13\1\217\2\13\1\42\20"+
    "\1\26\13\1\41\6\13\1\121\2\1\1\177\1\220\1\35\1\221\1\222\6\13\1\16\1\1\1"+
    "\44\25\13\1\41\1\1\4\13\1\207\2\13\1\26\2\1\1\42\1\13\1\1\1\13\1\223\1\224"+
    "\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\225\1\24\1\31\1\56\4\13\1\120\1\226"+
    "\1\227\2\1\1\230\1\13\1\14\1\231\2\41\2\1\7\13\1\31\4\1\3\13\1\43\7\1\1\232"+
    "\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\41\2\13"+
    "\1\233\1\234\2\1\11\13\1\41\1\121\5\1\2\13\1\26\3\13\1\150\11\1\23\13\1\177"+
    "\1\13\1\57\1\26\11\1\1\235\2\13\1\236\1\13\1\57\1\13\1\177\1\13\1\120\4\1"+
    "\1\13\1\237\1\13\1\57\1\13\1\121\4\1\3\13\1\240\4\1\1\241\1\242\1\13\1\243"+
    "\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1\13\1\177\1\1\3\13\1\57\1\13\1\57\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\146\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\177"+
    "\1\1\1\56\1\166\3\13\1\31\1\1\1\13\1\146\1\121\3\13\1\134\1\1\2\13\1\244\4"+
    "\13\1\245\1\246\2\1\1\13\1\22\1\13\1\26\4\1\1\247\1\27\1\146\3\13\1\31\1\121"+
    "\1\34\1\46\1\35\1\61\1\66\1\250\1\251\1\43\20\1\4\13\1\252\1\121\12\1\3\13"+
    "\1\253\1\63\1\254\2\1\4\13\1\255\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100"+
    "\1\42\1\121\26\1\4\13\1\121\1\166\34\1\3\13\1\146\20\1\71\13\1\121\6\1\6\13"+
    "\1\120\1\1\14\13\1\150\53\1\2\13\1\120\75\1\44\13\1\177\33\1\43\13\1\146\1"+
    "\13\1\120\1\121\6\1\1\13\1\41\1\43\3\13\1\177\1\150\1\121\1\44\1\256\1\13"+
    "\67\1\4\13\1\43\2\13\1\120\1\166\1\13\6\1\1\16\77\1\6\13\1\31\1\133\1\146"+
    "\1\257\114\1\1\260\1\261\1\262\1\1\1\263\11\1\1\264\33\1\5\13\1\134\3\13\1"+
    "\147\1\265\1\266\1\267\3\13\1\270\1\271\1\13\1\272\1\273\1\77\24\13\1\253"+
    "\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13\1\120\1\13\1"+
    "\35\1\13\1\35\1\13\1\274\3\13\40\1\3\13\1\217\2\13\1\133\1\275\1\167\1\155"+
    "\1\24\25\1\14\13\1\43\1\177\122\1\1\267\1\13\1\276\1\277\1\300\1\301\1\302"+
    "\1\303\1\304\1\42\1\305\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55"+
    "\13\1\177\2\1\103\13\1\43\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13"+
    "\41\1");

  /* The ZZ_CMAP_A table has 3168 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\6\1\5\1\11\1\7\22\0\1\13\11\0\1\16\1\0\1\4\1\0\1\1\1\15\12\3"+
    "\1\17\1\26\1\0\1\17\2\0\1\14\1\43\1\2\1\44\1\2\1\45\1\2\1\37\1\35\1\36\2\2"+
    "\1\41\1\42\1\32\1\33\4\2\1\34\2\2\1\40\3\2\1\0\1\12\2\0\1\2\1\0\1\27\5\2\1"+
    "\30\1\2\1\20\3\2\1\21\1\2\1\23\1\22\1\2\1\24\1\31\1\25\6\2\12\0\1\5\24\0\1"+
    "\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1"+
    "\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1"+
    "\0\11\1\1\0\26\1\2\0\1\1\6\0\10\1\10\0\16\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1"+
    "\1\10\0\13\1\5\0\3\1\15\0\12\1\4\0\6\1\1\0\10\1\2\0\12\1\1\0\23\1\2\0\14\1"+
    "\2\0\11\1\4\0\1\1\5\0\16\1\2\0\14\1\4\0\5\1\16\0\21\1\2\0\13\1\2\0\16\1\1"+
    "\0\1\1\3\0\4\1\2\0\11\1\2\0\2\1\2\0\4\1\10\0\1\1\4\0\2\1\1\0\1\1\1\0\3\1\1"+
    "\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\1\1\0\5\1\4\0\2\1\2\0\3\1\3\0"+
    "\1\1\7\0\4\1\1\0\1\1\7\0\20\1\13\0\3\1\1\0\11\1\1\0\2\1\1\0\2\1\1\0\5\1\2"+
    "\0\12\1\1\0\3\1\1\0\3\1\2\0\1\1\30\0\1\1\7\0\3\1\1\0\10\1\2\0\6\1\2\0\2\1"+
    "\2\0\3\1\10\0\2\1\4\0\2\1\1\0\1\1\1\0\1\1\20\0\2\1\1\0\6\1\3\0\3\1\1\0\4\1"+
    "\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\5\1\3\0\3\1\1\0\4\1\2\0\1\1\6"+
    "\0\1\1\10\0\4\1\1\0\10\1\1\0\3\1\1\0\30\1\3\0\10\1\1\0\3\1\1\0\4\1\7\0\2\1"+
    "\1\0\3\1\6\0\3\1\1\0\10\1\1\0\6\1\1\0\5\1\2\0\4\1\5\0\2\1\7\0\1\1\2\0\2\1"+
    "\15\0\5\1\1\0\3\1\1\0\5\1\10\0\1\1\7\0\1\1\12\0\6\1\2\0\2\1\1\0\22\1\3\0\10"+
    "\1\1\0\11\1\1\0\1\1\2\0\7\1\3\0\1\1\4\0\6\1\1\0\1\1\1\0\10\1\2\0\2\1\14\0"+
    "\17\1\1\0\12\1\7\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\15\1\1\0\3\1\2\0\5\1\1\0\1\1\1\0\6\1\2\0"+
    "\12\1\2\0\4\1\10\0\2\1\13\0\1\1\1\0\1\1\1\0\1\1\4\0\12\1\1\0\24\1\3\0\5\1"+
    "\1\0\12\1\6\0\1\1\11\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7"+
    "\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6"+
    "\1\2\0\13\1\3\0\13\1\7\0\15\1\1\0\6\1\14\0\1\1\1\0\2\1\14\0\4\1\3\0\1\1\4"+
    "\0\2\1\15\0\3\1\11\0\1\1\23\0\10\1\1\0\23\1\1\0\2\1\6\0\6\1\6\0\14\1\1\0\1"+
    "\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
    "\14\0\2\5\25\0\1\1\4\0\1\1\14\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0"+
    "\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\1\1\5\0\5\1\4\0\1\1\1\0\5"+
    "\1\6\0\15\1\7\0\10\1\11\0\7\1\1\0\7\1\6\0\3\1\11\0\5\1\2\0\5\1\3\0\7\1\2\0"+
    "\2\1\2\0\3\1\5\0\16\1\1\0\12\1\1\0\1\1\7\0\11\1\2\0\27\1\2\0\15\1\3\0\1\1"+
    "\1\0\1\1\2\0\1\1\16\0\1\1\2\0\5\1\12\0\6\1\2\0\6\1\2\0\6\1\11\0\13\1\1\0\2"+
    "\1\2\0\7\1\4\0\5\1\3\0\5\1\5\0\12\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12"+
    "\1\3\0\2\1\30\0\16\1\4\0\1\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1\1\0"+
    "\16\1\1\0\2\1\1\0\1\1\15\0\1\1\2\0\4\1\4\0\10\1\1\0\5\1\12\0\6\1\2\0\1\1\1"+
    "\0\14\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\2\1\5\0\10\1"+
    "\1\0\3\1\1\0\13\1\4\0\3\1\4\0\5\1\2\0\1\1\11\0\5\1\5\0\3\1\3\0\13\1\1\0\1"+
    "\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\2\1\6\0\1\1\5\0\7\1\2\0\7\1\3\0\6\1\1\0\1\1"+
    "\10\0\6\1\2\0\10\1\10\0\6\1\2\0\1\1\3\0\1\1\13\0\10\1\5\0\15\1\3\0\2\1\6\0"+
    "\5\1\3\0\6\1\10\0\10\1\2\0\7\1\16\0\4\1\4\0\3\1\15\0\1\1\2\0\2\1\2\0\4\1\1"+
    "\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4\1"+
    "\1\0\5\1\1\0\1\1\3\0\11\1\1\0\10\1\2\0\2\1\5\0\1\1\13\0\2\1\1\0\1\1\2\0\1"+
    "\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3"+
    "\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1"+
    "\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\2\4\1\5\2\6"+
    "\2\7\1\4\1\7\2\4\1\10\2\11\1\0\2\2"+
    "\5\0\1\3\2\6\1\0\1\12\1\10\1\2\1\13"+
    "\3\0\1\2\1\13\2\0\1\2\1\0\1\14\1\2"+
    "\1\0\1\2\1\15\13\2\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u010a\0\u01ee\0\u0214"+
    "\0\u023a\0\u017c\0\u0260\0\u0286\0\u010a\0\u02ac\0\u0130\0\230"+
    "\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0214\0\u01c8\0\u0390"+
    "\0\u03b6\0\u0260\0\u017c\0\u017c\0\u03dc\0\u0402\0\u0428\0\u044e"+
    "\0\u0474\0\u049a\0\u017c\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u017c"+
    "\0\u0558\0\u057e\0\u05a4\0\u017c\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\2\5\1\7\1\10\1\7\2\10\1\11"+
    "\1\10\1\12\2\5\1\13\6\6\1\5\17\6\5\14"+
    "\1\15\1\16\1\15\1\17\1\16\1\20\1\21\32\14"+
    "\1\22\3\23\1\22\5\10\1\22\1\10\4\22\6\23"+
    "\1\22\17\23\2\22\1\24\2\22\2\25\1\26\1\10"+
    "\1\25\1\22\1\10\4\22\6\24\1\22\17\24\6\5"+
    "\1\0\1\5\2\0\1\27\2\0\2\5\1\0\30\5"+
    "\2\6\1\30\1\5\1\0\1\5\2\0\1\27\2\0"+
    "\2\5\1\0\6\6\1\5\3\6\1\31\13\6\5\5"+
    "\1\7\1\10\1\7\2\10\1\27\1\10\1\0\2\5"+
    "\1\0\26\5\5\0\5\10\1\0\1\10\45\0\1\5"+
    "\47\0\1\32\1\33\1\0\1\34\6\0\1\35\64\0"+
    "\6\14\1\0\2\14\1\0\1\36\40\14\1\37\1\10"+
    "\2\37\1\10\1\36\1\37\37\14\1\40\1\21\1\40"+
    "\1\17\1\21\1\36\1\17\41\14\1\41\36\14\5\0"+
    "\1\10\1\21\1\10\2\21\1\0\1\21\33\0\3\42"+
    "\14\0\6\42\1\43\17\42\2\0\2\24\1\44\13\0"+
    "\6\24\1\0\17\24\5\0\1\10\1\25\3\10\1\0"+
    "\1\10\32\0\2\5\2\6\1\30\1\5\1\0\1\5"+
    "\2\0\1\27\2\0\2\5\1\0\6\6\1\5\3\6"+
    "\1\31\1\45\12\6\15\0\1\46\30\0\14\33\1\0"+
    "\1\33\1\47\27\33\21\0\1\50\50\0\1\51\21\0"+
    "\5\14\1\40\1\10\2\40\1\10\1\36\1\40\43\14"+
    "\1\0\1\36\33\14\2\5\2\6\1\30\1\5\1\0"+
    "\1\5\2\0\1\27\2\0\2\5\1\0\6\6\1\5"+
    "\3\6\1\31\1\6\1\52\11\6\6\46\2\0\36\46"+
    "\14\0\1\53\53\0\1\54\53\0\1\55\15\0\2\5"+
    "\2\6\1\30\1\5\1\0\1\5\2\0\1\27\2\0"+
    "\2\5\1\0\6\6\1\5\3\6\1\31\2\6\1\56"+
    "\10\6\23\0\1\57\53\0\1\60\14\0\2\5\2\6"+
    "\1\30\1\5\1\0\1\5\2\0\1\27\2\0\2\5"+
    "\1\0\6\6\1\5\3\6\1\31\3\6\1\61\7\6"+
    "\24\0\1\62\21\0\2\5\2\6\1\30\1\5\1\0"+
    "\1\5\2\0\1\27\2\0\2\5\1\0\6\6\1\5"+
    "\3\6\1\63\13\6\25\0\1\64\20\0\2\5\2\6"+
    "\1\30\1\5\1\0\1\5\2\0\1\27\2\0\2\5"+
    "\1\0\6\6\1\5\3\6\1\31\1\45\3\6\1\65"+
    "\6\6\2\5\2\6\1\30\1\5\1\0\1\5\2\0"+
    "\1\27\2\0\2\5\1\0\6\6\1\5\3\6\1\31"+
    "\5\6\1\66\5\6\2\5\2\6\1\30\1\5\1\0"+
    "\1\5\2\0\1\27\2\0\2\5\1\0\6\6\1\5"+
    "\3\6\1\31\3\6\1\67\7\6\2\5\2\6\1\30"+
    "\1\5\1\0\1\5\2\0\1\27\2\0\2\5\1\0"+
    "\6\6\1\5\3\6\1\31\6\6\1\70\4\6\2\5"+
    "\2\6\1\30\1\5\1\0\1\5\2\0\1\27\2\0"+
    "\2\5\1\0\6\6\1\5\3\6\1\31\6\6\1\71"+
    "\4\6\2\5\2\6\1\30\1\5\1\0\1\5\2\0"+
    "\1\27\2\0\2\5\1\0\6\6\1\5\3\6\1\31"+
    "\7\6\1\72\3\6\2\5\2\6\1\30\1\5\1\0"+
    "\1\5\2\0\1\27\2\0\2\5\1\0\6\6\1\5"+
    "\3\6\1\31\10\6\1\73\2\6\2\5\2\6\1\30"+
    "\1\5\1\0\1\5\2\0\1\27\2\0\2\5\1\0"+
    "\6\6\1\5\3\6\1\31\1\6\1\74\11\6\2\5"+
    "\2\6\1\30\1\5\1\0\1\5\2\0\1\27\2\0"+
    "\2\5\1\0\6\6\1\5\3\6\1\31\2\6\1\75"+
    "\10\6\2\5\2\6\1\30\1\5\1\0\1\5\2\0"+
    "\1\27\2\0\2\5\1\0\6\6\1\5\3\6\1\31"+
    "\11\6\1\76\1\6\2\5\2\6\1\30\1\5\1\0"+
    "\1\5\2\0\1\27\2\0\2\5\1\0\6\6\1\5"+
    "\3\6\1\31\7\6\1\77\3\6\2\5\2\6\1\30"+
    "\1\5\1\0\1\5\2\0\1\27\2\0\2\5\1\0"+
    "\6\6\1\5\3\6\1\31\12\6\1\100";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\6\1\1\11\6\1\1\11\4\1\1\0\2\1"+
    "\5\0\3\1\1\0\2\11\2\1\3\0\1\1\1\11"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\1\1\11"+
    "\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  boolean argsWaitingType = true;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RythmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return RythmTypes.KEY;
            }
          case 15: break;
          case 2: 
            { yybegin(YYINITIAL); return RythmTypes.IDENTIFIER;
            }
          case 16: break;
          case 3: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 17: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            }
          case 18: break;
          case 5: 
            { yybegin(WAITING_VALUE); return RythmTypes.SEPARATOR;
            }
          case 19: break;
          case 6: 
            { yybegin(YYINITIAL); return RythmTypes.VALUE;
            }
          case 20: break;
          case 7: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          case 21: break;
          case 8: 
            { argsWaitingType = !argsWaitingType; return argsWaitingType ? RythmTypes.IDENTIFIER : RythmTypes.TYPE;
            }
          case 22: break;
          case 9: 
            { yybegin(YYINITIAL); return RythmTypes.WHITE_SPACE;
            }
          case 23: break;
          case 10: 
            { yybegin(YYINITIAL); return RythmTypes.IMPORT_VALUE;
            }
          case 24: break;
          case 11: 
            { yybegin(YYINITIAL); return RythmTypes.COMMENT;
            }
          case 25: break;
          case 12: 
            { yybegin(ARGS); return RythmTypes.ARGS_DIRECTIVE;
            }
          case 26: break;
          case 13: 
            { yybegin(IMPORT); return RythmTypes.IMPORT_DIRECTIVE;
            }
          case 27: break;
          case 14: 
            { yybegin(YYINITIAL); return RythmTypes.TYPE;
            }
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
